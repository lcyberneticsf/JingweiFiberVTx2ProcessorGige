// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: label.proto

#include "label.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace aq {
namespace aidi {
class Point2fDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Point2f>
      _instance;
} _Point2f_default_instance_;
class Size2fDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Size2f>
      _instance;
} _Size2f_default_instance_;
class KeyPoint_ExtInfoEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KeyPoint_ExtInfoEntry_DoNotUse>
      _instance;
} _KeyPoint_ExtInfoEntry_DoNotUse_default_instance_;
class KeyPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KeyPoint>
      _instance;
} _KeyPoint_default_instance_;
class RingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ring>
      _instance;
} _Ring_default_instance_;
class PolygonDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Polygon>
      _instance;
} _Polygon_default_instance_;
class Region_ExtInfoEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Region_ExtInfoEntry_DoNotUse>
      _instance;
} _Region_ExtInfoEntry_DoNotUse_default_instance_;
class RegionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Region>
      _instance;
} _Region_default_instance_;
class Label_ExtInfoEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Label_ExtInfoEntry_DoNotUse>
      _instance;
} _Label_ExtInfoEntry_DoNotUse_default_instance_;
class LabelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Label>
      _instance;
} _Label_default_instance_;
}  // namespace aidi
}  // namespace aq
namespace protobuf_label_2eproto {
void InitDefaultsPoint2fImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::aq::aidi::_Point2f_default_instance_;
    new (ptr) ::aq::aidi::Point2f();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aq::aidi::Point2f::InitAsDefaultInstance();
}

void InitDefaultsPoint2f() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPoint2fImpl);
}

void InitDefaultsSize2fImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::aq::aidi::_Size2f_default_instance_;
    new (ptr) ::aq::aidi::Size2f();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aq::aidi::Size2f::InitAsDefaultInstance();
}

void InitDefaultsSize2f() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSize2fImpl);
}

void InitDefaultsKeyPoint_ExtInfoEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2fany_2eproto::InitDefaultsAny();
  {
    void* ptr = &::aq::aidi::_KeyPoint_ExtInfoEntry_DoNotUse_default_instance_;
    new (ptr) ::aq::aidi::KeyPoint_ExtInfoEntry_DoNotUse();
  }
  ::aq::aidi::KeyPoint_ExtInfoEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsKeyPoint_ExtInfoEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsKeyPoint_ExtInfoEntry_DoNotUseImpl);
}

void InitDefaultsKeyPointImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_label_2eproto::InitDefaultsPoint2f();
  protobuf_label_2eproto::InitDefaultsKeyPoint_ExtInfoEntry_DoNotUse();
  {
    void* ptr = &::aq::aidi::_KeyPoint_default_instance_;
    new (ptr) ::aq::aidi::KeyPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aq::aidi::KeyPoint::InitAsDefaultInstance();
}

void InitDefaultsKeyPoint() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsKeyPointImpl);
}

void InitDefaultsRingImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_label_2eproto::InitDefaultsPoint2f();
  {
    void* ptr = &::aq::aidi::_Ring_default_instance_;
    new (ptr) ::aq::aidi::Ring();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aq::aidi::Ring::InitAsDefaultInstance();
}

void InitDefaultsRing() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRingImpl);
}

void InitDefaultsPolygonImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_label_2eproto::InitDefaultsRing();
  {
    void* ptr = &::aq::aidi::_Polygon_default_instance_;
    new (ptr) ::aq::aidi::Polygon();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aq::aidi::Polygon::InitAsDefaultInstance();
}

void InitDefaultsPolygon() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPolygonImpl);
}

void InitDefaultsRegion_ExtInfoEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2fany_2eproto::InitDefaultsAny();
  {
    void* ptr = &::aq::aidi::_Region_ExtInfoEntry_DoNotUse_default_instance_;
    new (ptr) ::aq::aidi::Region_ExtInfoEntry_DoNotUse();
  }
  ::aq::aidi::Region_ExtInfoEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsRegion_ExtInfoEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRegion_ExtInfoEntry_DoNotUseImpl);
}

void InitDefaultsRegionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_label_2eproto::InitDefaultsPolygon();
  protobuf_label_2eproto::InitDefaultsKeyPoint();
  protobuf_label_2eproto::InitDefaultsRegion_ExtInfoEntry_DoNotUse();
  {
    void* ptr = &::aq::aidi::_Region_default_instance_;
    new (ptr) ::aq::aidi::Region();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aq::aidi::Region::InitAsDefaultInstance();
}

void InitDefaultsRegion() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRegionImpl);
}

void InitDefaultsLabel_ExtInfoEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2fany_2eproto::InitDefaultsAny();
  {
    void* ptr = &::aq::aidi::_Label_ExtInfoEntry_DoNotUse_default_instance_;
    new (ptr) ::aq::aidi::Label_ExtInfoEntry_DoNotUse();
  }
  ::aq::aidi::Label_ExtInfoEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsLabel_ExtInfoEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLabel_ExtInfoEntry_DoNotUseImpl);
}

void InitDefaultsLabelImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_label_2eproto::InitDefaultsSize2f();
  protobuf_label_2eproto::InitDefaultsRegion();
  protobuf_label_2eproto::InitDefaultsPolygon();
  protobuf_google_2fprotobuf_2fany_2eproto::InitDefaultsAny();
  protobuf_label_2eproto::InitDefaultsLabel_ExtInfoEntry_DoNotUse();
  {
    void* ptr = &::aq::aidi::_Label_default_instance_;
    new (ptr) ::aq::aidi::Label();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aq::aidi::Label::InitAsDefaultInstance();
}

void InitDefaultsLabel() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLabelImpl);
}

::google::protobuf::Metadata file_level_metadata[10];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aq::aidi::Point2f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aq::aidi::Point2f, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aq::aidi::Point2f, y_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aq::aidi::Size2f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aq::aidi::Size2f, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aq::aidi::Size2f, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aq::aidi::KeyPoint_ExtInfoEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aq::aidi::KeyPoint_ExtInfoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aq::aidi::KeyPoint_ExtInfoEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aq::aidi::KeyPoint_ExtInfoEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aq::aidi::KeyPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aq::aidi::KeyPoint, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aq::aidi::KeyPoint, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aq::aidi::KeyPoint, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aq::aidi::KeyPoint, angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aq::aidi::KeyPoint, radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aq::aidi::KeyPoint, ext_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aq::aidi::Ring, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aq::aidi::Ring, points_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aq::aidi::Polygon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aq::aidi::Polygon, outer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aq::aidi::Polygon, inners_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aq::aidi::Region_ExtInfoEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aq::aidi::Region_ExtInfoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aq::aidi::Region_ExtInfoEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aq::aidi::Region_ExtInfoEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aq::aidi::Region, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aq::aidi::Region, polygon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aq::aidi::Region, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aq::aidi::Region, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aq::aidi::Region, key_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aq::aidi::Region, ext_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aq::aidi::Label_ExtInfoEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aq::aidi::Label_ExtInfoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aq::aidi::Label_ExtInfoEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aq::aidi::Label_ExtInfoEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aq::aidi::Label, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aq::aidi::Label, dataset_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aq::aidi::Label, img_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aq::aidi::Label, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aq::aidi::Label, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aq::aidi::Label, regions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aq::aidi::Label, masks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aq::aidi::Label, hardcases_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aq::aidi::Label, origin_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aq::aidi::Label, ext_info_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::aq::aidi::Point2f)},
  { 7, -1, sizeof(::aq::aidi::Size2f)},
  { 14, 21, sizeof(::aq::aidi::KeyPoint_ExtInfoEntry_DoNotUse)},
  { 23, -1, sizeof(::aq::aidi::KeyPoint)},
  { 34, -1, sizeof(::aq::aidi::Ring)},
  { 40, -1, sizeof(::aq::aidi::Polygon)},
  { 47, 54, sizeof(::aq::aidi::Region_ExtInfoEntry_DoNotUse)},
  { 56, -1, sizeof(::aq::aidi::Region)},
  { 66, 73, sizeof(::aq::aidi::Label_ExtInfoEntry_DoNotUse)},
  { 75, -1, sizeof(::aq::aidi::Label)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::aq::aidi::_Point2f_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::aq::aidi::_Size2f_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::aq::aidi::_KeyPoint_ExtInfoEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::aq::aidi::_KeyPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::aq::aidi::_Ring_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::aq::aidi::_Polygon_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::aq::aidi::_Region_ExtInfoEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::aq::aidi::_Region_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::aq::aidi::_Label_ExtInfoEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::aq::aidi::_Label_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "label.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013label.proto\022\007aq.aidi\032\031google/protobuf/"
      "any.proto\"\037\n\007Point2f\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001"
      "(\002\"\'\n\006Size2f\022\r\n\005width\030\001 \001(\002\022\016\n\006height\030\002 "
      "\001(\002\"\342\001\n\010KeyPoint\022\"\n\010location\030\001 \001(\0132\020.aq."
      "aidi.Point2f\022\014\n\004name\030\002 \001(\t\022\r\n\005score\030\003 \001("
      "\002\022\r\n\005angle\030\004 \001(\002\022\016\n\006radius\030\005 \001(\002\0220\n\010ext_"
      "info\030\017 \003(\0132\036.aq.aidi.KeyPoint.ExtInfoEnt"
      "ry\032D\n\014ExtInfoEntry\022\013\n\003key\030\001 \001(\t\022#\n\005value"
      "\030\002 \001(\0132\024.google.protobuf.Any:\0028\001\"(\n\004Ring"
      "\022 \n\006points\030\001 \003(\0132\020.aq.aidi.Point2f\"F\n\007Po"
      "lygon\022\034\n\005outer\030\001 \001(\0132\r.aq.aidi.Ring\022\035\n\006i"
      "nners\030\002 \003(\0132\r.aq.aidi.Ring\"\345\001\n\006Region\022!\n"
      "\007polygon\030\001 \001(\0132\020.aq.aidi.Polygon\022\014\n\004name"
      "\030\002 \001(\t\022\r\n\005score\030\003 \001(\002\022%\n\nkey_points\030\004 \003("
      "\0132\021.aq.aidi.KeyPoint\022.\n\010ext_info\030\017 \003(\0132\034"
      ".aq.aidi.Region.ExtInfoEntry\032D\n\014ExtInfoE"
      "ntry\022\013\n\003key\030\001 \001(\t\022#\n\005value\030\002 \001(\0132\024.googl"
      "e.protobuf.Any:\0028\001\"\327\003\n\005Label\0220\n\014dataset_"
      "type\030\001 \001(\0162\032.aq.aidi.Label.DataSetType\022!"
      "\n\010img_size\030\002 \001(\0132\017.aq.aidi.Size2f\022\014\n\004nam"
      "e\030\003 \001(\t\022\r\n\005score\030\004 \001(\002\022 \n\007regions\030\005 \003(\0132"
      "\017.aq.aidi.Region\022\037\n\005masks\030\006 \003(\0132\020.aq.aid"
      "i.Polygon\022#\n\thardcases\030\007 \003(\0132\020.aq.aidi.P"
      "olygon\022+\n\rorigin_result\030\010 \001(\0132\024.google.p"
      "rotobuf.Any\022-\n\010ext_info\030\017 \003(\0132\033.aq.aidi."
      "Label.ExtInfoEntry\032D\n\014ExtInfoEntry\022\013\n\003ke"
      "y\030\001 \001(\t\022#\n\005value\030\002 \001(\0132\024.google.protobuf"
      ".Any:\0028\001\"R\n\013DataSetType\022\013\n\007Unknown\020\000\022\013\n\007"
      "Segment\020\001\022\r\n\tDetection\020\002\022\014\n\010Classify\020\003\022\014"
      "\n\010Location\020\004b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1180);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "label.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fany_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_label_2eproto
namespace aq {
namespace aidi {
const ::google::protobuf::EnumDescriptor* Label_DataSetType_descriptor() {
  protobuf_label_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_label_2eproto::file_level_enum_descriptors[0];
}
bool Label_DataSetType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Label_DataSetType Label::Unknown;
const Label_DataSetType Label::Segment;
const Label_DataSetType Label::Detection;
const Label_DataSetType Label::Classify;
const Label_DataSetType Label::Location;
const Label_DataSetType Label::DataSetType_MIN;
const Label_DataSetType Label::DataSetType_MAX;
const int Label::DataSetType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Point2f::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point2f::kXFieldNumber;
const int Point2f::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point2f::Point2f()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_label_2eproto::InitDefaultsPoint2f();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aq.aidi.Point2f)
}
Point2f::Point2f(const Point2f& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:aq.aidi.Point2f)
}

void Point2f::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _cached_size_ = 0;
}

Point2f::~Point2f() {
  // @@protoc_insertion_point(destructor:aq.aidi.Point2f)
  SharedDtor();
}

void Point2f::SharedDtor() {
}

void Point2f::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point2f::descriptor() {
  ::protobuf_label_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_label_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Point2f& Point2f::default_instance() {
  ::protobuf_label_2eproto::InitDefaultsPoint2f();
  return *internal_default_instance();
}

Point2f* Point2f::New(::google::protobuf::Arena* arena) const {
  Point2f* n = new Point2f;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Point2f::Clear() {
// @@protoc_insertion_point(message_clear_start:aq.aidi.Point2f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

bool Point2f::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aq.aidi.Point2f)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aq.aidi.Point2f)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aq.aidi.Point2f)
  return false;
#undef DO_
}

void Point2f::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aq.aidi.Point2f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:aq.aidi.Point2f)
}

::google::protobuf::uint8* Point2f::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:aq.aidi.Point2f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aq.aidi.Point2f)
  return target;
}

size_t Point2f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aq.aidi.Point2f)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point2f::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aq.aidi.Point2f)
  GOOGLE_DCHECK_NE(&from, this);
  const Point2f* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Point2f>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aq.aidi.Point2f)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aq.aidi.Point2f)
    MergeFrom(*source);
  }
}

void Point2f::MergeFrom(const Point2f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aq.aidi.Point2f)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void Point2f::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aq.aidi.Point2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point2f::CopyFrom(const Point2f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aq.aidi.Point2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point2f::IsInitialized() const {
  return true;
}

void Point2f::Swap(Point2f* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point2f::InternalSwap(Point2f* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Point2f::GetMetadata() const {
  protobuf_label_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_label_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Size2f::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Size2f::kWidthFieldNumber;
const int Size2f::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Size2f::Size2f()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_label_2eproto::InitDefaultsSize2f();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aq.aidi.Size2f)
}
Size2f::Size2f(const Size2f& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:aq.aidi.Size2f)
}

void Size2f::SharedCtor() {
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
  _cached_size_ = 0;
}

Size2f::~Size2f() {
  // @@protoc_insertion_point(destructor:aq.aidi.Size2f)
  SharedDtor();
}

void Size2f::SharedDtor() {
}

void Size2f::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Size2f::descriptor() {
  ::protobuf_label_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_label_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Size2f& Size2f::default_instance() {
  ::protobuf_label_2eproto::InitDefaultsSize2f();
  return *internal_default_instance();
}

Size2f* Size2f::New(::google::protobuf::Arena* arena) const {
  Size2f* n = new Size2f;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Size2f::Clear() {
// @@protoc_insertion_point(message_clear_start:aq.aidi.Size2f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
  _internal_metadata_.Clear();
}

bool Size2f::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aq.aidi.Size2f)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float width = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float height = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aq.aidi.Size2f)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aq.aidi.Size2f)
  return false;
#undef DO_
}

void Size2f::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aq.aidi.Size2f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float width = 1;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->width(), output);
  }

  // float height = 2;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->height(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:aq.aidi.Size2f)
}

::google::protobuf::uint8* Size2f::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:aq.aidi.Size2f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float width = 1;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->width(), target);
  }

  // float height = 2;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->height(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aq.aidi.Size2f)
  return target;
}

size_t Size2f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aq.aidi.Size2f)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float width = 1;
  if (this->width() != 0) {
    total_size += 1 + 4;
  }

  // float height = 2;
  if (this->height() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Size2f::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aq.aidi.Size2f)
  GOOGLE_DCHECK_NE(&from, this);
  const Size2f* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Size2f>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aq.aidi.Size2f)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aq.aidi.Size2f)
    MergeFrom(*source);
  }
}

void Size2f::MergeFrom(const Size2f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aq.aidi.Size2f)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void Size2f::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aq.aidi.Size2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Size2f::CopyFrom(const Size2f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aq.aidi.Size2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Size2f::IsInitialized() const {
  return true;
}

void Size2f::Swap(Size2f* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Size2f::InternalSwap(Size2f* other) {
  using std::swap;
  swap(width_, other->width_);
  swap(height_, other->height_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Size2f::GetMetadata() const {
  protobuf_label_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_label_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

KeyPoint_ExtInfoEntry_DoNotUse::KeyPoint_ExtInfoEntry_DoNotUse() {}
KeyPoint_ExtInfoEntry_DoNotUse::KeyPoint_ExtInfoEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void KeyPoint_ExtInfoEntry_DoNotUse::MergeFrom(const KeyPoint_ExtInfoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata KeyPoint_ExtInfoEntry_DoNotUse::GetMetadata() const {
  ::protobuf_label_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_label_2eproto::file_level_metadata[2];
}
void KeyPoint_ExtInfoEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void KeyPoint::InitAsDefaultInstance() {
  ::aq::aidi::_KeyPoint_default_instance_._instance.get_mutable()->location_ = const_cast< ::aq::aidi::Point2f*>(
      ::aq::aidi::Point2f::internal_default_instance());
}
void KeyPoint::clear_ext_info() {
  ext_info_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyPoint::kLocationFieldNumber;
const int KeyPoint::kNameFieldNumber;
const int KeyPoint::kScoreFieldNumber;
const int KeyPoint::kAngleFieldNumber;
const int KeyPoint::kRadiusFieldNumber;
const int KeyPoint::kExtInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyPoint::KeyPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_label_2eproto::InitDefaultsKeyPoint();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aq.aidi.KeyPoint)
}
KeyPoint::KeyPoint(const KeyPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ext_info_.MergeFrom(from.ext_info_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_location()) {
    location_ = new ::aq::aidi::Point2f(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&radius_) -
    reinterpret_cast<char*>(&score_)) + sizeof(radius_));
  // @@protoc_insertion_point(copy_constructor:aq.aidi.KeyPoint)
}

void KeyPoint::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radius_) -
      reinterpret_cast<char*>(&location_)) + sizeof(radius_));
  _cached_size_ = 0;
}

KeyPoint::~KeyPoint() {
  // @@protoc_insertion_point(destructor:aq.aidi.KeyPoint)
  SharedDtor();
}

void KeyPoint::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete location_;
}

void KeyPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyPoint::descriptor() {
  ::protobuf_label_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_label_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KeyPoint& KeyPoint::default_instance() {
  ::protobuf_label_2eproto::InitDefaultsKeyPoint();
  return *internal_default_instance();
}

KeyPoint* KeyPoint::New(::google::protobuf::Arena* arena) const {
  KeyPoint* n = new KeyPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:aq.aidi.KeyPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ext_info_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radius_) -
      reinterpret_cast<char*>(&score_)) + sizeof(radius_));
  _internal_metadata_.Clear();
}

bool KeyPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aq.aidi.KeyPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aq.aidi.Point2f location = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aq.aidi.KeyPoint.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float score = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float radius = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .google.protobuf.Any> ext_info = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          KeyPoint_ExtInfoEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              KeyPoint_ExtInfoEntry_DoNotUse,
              ::std::string, ::google::protobuf::Any,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::Any > > parser(&ext_info_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aq.aidi.KeyPoint.ExtInfoEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aq.aidi.KeyPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aq.aidi.KeyPoint)
  return false;
#undef DO_
}

void KeyPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aq.aidi.KeyPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aq.aidi.Point2f location = 1;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->location_, output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aq.aidi.KeyPoint.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // float score = 3;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->score(), output);
  }

  // float angle = 4;
  if (this->angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->angle(), output);
  }

  // float radius = 5;
  if (this->radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->radius(), output);
  }

  // map<string, .google.protobuf.Any> ext_info = 15;
  if (!this->ext_info().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::Any >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "aq.aidi.KeyPoint.ExtInfoEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->ext_info().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->ext_info().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::Any >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::Any >::const_iterator
          it = this->ext_info().begin();
          it != this->ext_info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<KeyPoint_ExtInfoEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ext_info_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            15, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<KeyPoint_ExtInfoEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::Any >::const_iterator
          it = this->ext_info().begin();
          it != this->ext_info().end(); ++it) {
        entry.reset(ext_info_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            15, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:aq.aidi.KeyPoint)
}

::google::protobuf::uint8* KeyPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:aq.aidi.KeyPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aq.aidi.Point2f location = 1;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->location_, deterministic, target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aq.aidi.KeyPoint.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // float score = 3;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->score(), target);
  }

  // float angle = 4;
  if (this->angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->angle(), target);
  }

  // float radius = 5;
  if (this->radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->radius(), target);
  }

  // map<string, .google.protobuf.Any> ext_info = 15;
  if (!this->ext_info().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::Any >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "aq.aidi.KeyPoint.ExtInfoEntry.key");
      }
    };

    if (deterministic &&
        this->ext_info().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->ext_info().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::Any >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::Any >::const_iterator
          it = this->ext_info().begin();
          it != this->ext_info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<KeyPoint_ExtInfoEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ext_info_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       15, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<KeyPoint_ExtInfoEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::Any >::const_iterator
          it = this->ext_info().begin();
          it != this->ext_info().end(); ++it) {
        entry.reset(ext_info_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       15, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aq.aidi.KeyPoint)
  return target;
}

size_t KeyPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aq.aidi.KeyPoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, .google.protobuf.Any> ext_info = 15;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ext_info_size());
  {
    ::google::protobuf::scoped_ptr<KeyPoint_ExtInfoEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::Any >::const_iterator
        it = this->ext_info().begin();
        it != this->ext_info().end(); ++it) {
      entry.reset(ext_info_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .aq.aidi.Point2f location = 1;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->location_);
  }

  // float score = 3;
  if (this->score() != 0) {
    total_size += 1 + 4;
  }

  // float angle = 4;
  if (this->angle() != 0) {
    total_size += 1 + 4;
  }

  // float radius = 5;
  if (this->radius() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aq.aidi.KeyPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aq.aidi.KeyPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aq.aidi.KeyPoint)
    MergeFrom(*source);
  }
}

void KeyPoint::MergeFrom(const KeyPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aq.aidi.KeyPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ext_info_.MergeFrom(from.ext_info_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_location()) {
    mutable_location()->::aq::aidi::Point2f::MergeFrom(from.location());
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
  if (from.angle() != 0) {
    set_angle(from.angle());
  }
  if (from.radius() != 0) {
    set_radius(from.radius());
  }
}

void KeyPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aq.aidi.KeyPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyPoint::CopyFrom(const KeyPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aq.aidi.KeyPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyPoint::IsInitialized() const {
  return true;
}

void KeyPoint::Swap(KeyPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyPoint::InternalSwap(KeyPoint* other) {
  using std::swap;
  ext_info_.Swap(&other->ext_info_);
  name_.Swap(&other->name_);
  swap(location_, other->location_);
  swap(score_, other->score_);
  swap(angle_, other->angle_);
  swap(radius_, other->radius_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeyPoint::GetMetadata() const {
  protobuf_label_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_label_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ring::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ring::kPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ring::Ring()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_label_2eproto::InitDefaultsRing();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aq.aidi.Ring)
}
Ring::Ring(const Ring& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      points_(from.points_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aq.aidi.Ring)
}

void Ring::SharedCtor() {
  _cached_size_ = 0;
}

Ring::~Ring() {
  // @@protoc_insertion_point(destructor:aq.aidi.Ring)
  SharedDtor();
}

void Ring::SharedDtor() {
}

void Ring::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ring::descriptor() {
  ::protobuf_label_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_label_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ring& Ring::default_instance() {
  ::protobuf_label_2eproto::InitDefaultsRing();
  return *internal_default_instance();
}

Ring* Ring::New(::google::protobuf::Arena* arena) const {
  Ring* n = new Ring;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ring::Clear() {
// @@protoc_insertion_point(message_clear_start:aq.aidi.Ring)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  _internal_metadata_.Clear();
}

bool Ring::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aq.aidi.Ring)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aq.aidi.Point2f points = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aq.aidi.Ring)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aq.aidi.Ring)
  return false;
#undef DO_
}

void Ring::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aq.aidi.Ring)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aq.aidi.Point2f points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->points(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:aq.aidi.Ring)
}

::google::protobuf::uint8* Ring::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:aq.aidi.Ring)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aq.aidi.Point2f points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->points(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aq.aidi.Ring)
  return target;
}

size_t Ring::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aq.aidi.Ring)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .aq.aidi.Point2f points = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->points(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ring::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aq.aidi.Ring)
  GOOGLE_DCHECK_NE(&from, this);
  const Ring* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ring>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aq.aidi.Ring)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aq.aidi.Ring)
    MergeFrom(*source);
  }
}

void Ring::MergeFrom(const Ring& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aq.aidi.Ring)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
}

void Ring::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aq.aidi.Ring)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ring::CopyFrom(const Ring& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aq.aidi.Ring)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ring::IsInitialized() const {
  return true;
}

void Ring::Swap(Ring* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ring::InternalSwap(Ring* other) {
  using std::swap;
  points_.InternalSwap(&other->points_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ring::GetMetadata() const {
  protobuf_label_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_label_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Polygon::InitAsDefaultInstance() {
  ::aq::aidi::_Polygon_default_instance_._instance.get_mutable()->outer_ = const_cast< ::aq::aidi::Ring*>(
      ::aq::aidi::Ring::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Polygon::kOuterFieldNumber;
const int Polygon::kInnersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Polygon::Polygon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_label_2eproto::InitDefaultsPolygon();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aq.aidi.Polygon)
}
Polygon::Polygon(const Polygon& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      inners_(from.inners_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_outer()) {
    outer_ = new ::aq::aidi::Ring(*from.outer_);
  } else {
    outer_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:aq.aidi.Polygon)
}

void Polygon::SharedCtor() {
  outer_ = NULL;
  _cached_size_ = 0;
}

Polygon::~Polygon() {
  // @@protoc_insertion_point(destructor:aq.aidi.Polygon)
  SharedDtor();
}

void Polygon::SharedDtor() {
  if (this != internal_default_instance()) delete outer_;
}

void Polygon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Polygon::descriptor() {
  ::protobuf_label_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_label_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Polygon& Polygon::default_instance() {
  ::protobuf_label_2eproto::InitDefaultsPolygon();
  return *internal_default_instance();
}

Polygon* Polygon::New(::google::protobuf::Arena* arena) const {
  Polygon* n = new Polygon;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Polygon::Clear() {
// @@protoc_insertion_point(message_clear_start:aq.aidi.Polygon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inners_.Clear();
  if (GetArenaNoVirtual() == NULL && outer_ != NULL) {
    delete outer_;
  }
  outer_ = NULL;
  _internal_metadata_.Clear();
}

bool Polygon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aq.aidi.Polygon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aq.aidi.Ring outer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_outer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aq.aidi.Ring inners = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_inners()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aq.aidi.Polygon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aq.aidi.Polygon)
  return false;
#undef DO_
}

void Polygon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aq.aidi.Polygon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aq.aidi.Ring outer = 1;
  if (this->has_outer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->outer_, output);
  }

  // repeated .aq.aidi.Ring inners = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inners_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->inners(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:aq.aidi.Polygon)
}

::google::protobuf::uint8* Polygon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:aq.aidi.Polygon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aq.aidi.Ring outer = 1;
  if (this->has_outer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->outer_, deterministic, target);
  }

  // repeated .aq.aidi.Ring inners = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inners_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->inners(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aq.aidi.Polygon)
  return target;
}

size_t Polygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aq.aidi.Polygon)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .aq.aidi.Ring inners = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->inners_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->inners(static_cast<int>(i)));
    }
  }

  // .aq.aidi.Ring outer = 1;
  if (this->has_outer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->outer_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Polygon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aq.aidi.Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  const Polygon* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Polygon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aq.aidi.Polygon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aq.aidi.Polygon)
    MergeFrom(*source);
  }
}

void Polygon::MergeFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aq.aidi.Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inners_.MergeFrom(from.inners_);
  if (from.has_outer()) {
    mutable_outer()->::aq::aidi::Ring::MergeFrom(from.outer());
  }
}

void Polygon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aq.aidi.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Polygon::CopyFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aq.aidi.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygon::IsInitialized() const {
  return true;
}

void Polygon::Swap(Polygon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Polygon::InternalSwap(Polygon* other) {
  using std::swap;
  inners_.InternalSwap(&other->inners_);
  swap(outer_, other->outer_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Polygon::GetMetadata() const {
  protobuf_label_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_label_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

Region_ExtInfoEntry_DoNotUse::Region_ExtInfoEntry_DoNotUse() {}
Region_ExtInfoEntry_DoNotUse::Region_ExtInfoEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void Region_ExtInfoEntry_DoNotUse::MergeFrom(const Region_ExtInfoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Region_ExtInfoEntry_DoNotUse::GetMetadata() const {
  ::protobuf_label_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_label_2eproto::file_level_metadata[6];
}
void Region_ExtInfoEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void Region::InitAsDefaultInstance() {
  ::aq::aidi::_Region_default_instance_._instance.get_mutable()->polygon_ = const_cast< ::aq::aidi::Polygon*>(
      ::aq::aidi::Polygon::internal_default_instance());
}
void Region::clear_ext_info() {
  ext_info_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Region::kPolygonFieldNumber;
const int Region::kNameFieldNumber;
const int Region::kScoreFieldNumber;
const int Region::kKeyPointsFieldNumber;
const int Region::kExtInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Region::Region()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_label_2eproto::InitDefaultsRegion();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aq.aidi.Region)
}
Region::Region(const Region& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      key_points_(from.key_points_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ext_info_.MergeFrom(from.ext_info_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_polygon()) {
    polygon_ = new ::aq::aidi::Polygon(*from.polygon_);
  } else {
    polygon_ = NULL;
  }
  score_ = from.score_;
  // @@protoc_insertion_point(copy_constructor:aq.aidi.Region)
}

void Region::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&polygon_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&polygon_)) + sizeof(score_));
  _cached_size_ = 0;
}

Region::~Region() {
  // @@protoc_insertion_point(destructor:aq.aidi.Region)
  SharedDtor();
}

void Region::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete polygon_;
}

void Region::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Region::descriptor() {
  ::protobuf_label_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_label_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Region& Region::default_instance() {
  ::protobuf_label_2eproto::InitDefaultsRegion();
  return *internal_default_instance();
}

Region* Region::New(::google::protobuf::Arena* arena) const {
  Region* n = new Region;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Region::Clear() {
// @@protoc_insertion_point(message_clear_start:aq.aidi.Region)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_points_.Clear();
  ext_info_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && polygon_ != NULL) {
    delete polygon_;
  }
  polygon_ = NULL;
  score_ = 0;
  _internal_metadata_.Clear();
}

bool Region::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aq.aidi.Region)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aq.aidi.Polygon polygon = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_polygon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aq.aidi.Region.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float score = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aq.aidi.KeyPoint key_points = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_key_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .google.protobuf.Any> ext_info = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          Region_ExtInfoEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Region_ExtInfoEntry_DoNotUse,
              ::std::string, ::google::protobuf::Any,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::Any > > parser(&ext_info_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aq.aidi.Region.ExtInfoEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aq.aidi.Region)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aq.aidi.Region)
  return false;
#undef DO_
}

void Region::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aq.aidi.Region)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aq.aidi.Polygon polygon = 1;
  if (this->has_polygon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->polygon_, output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aq.aidi.Region.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // float score = 3;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->score(), output);
  }

  // repeated .aq.aidi.KeyPoint key_points = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->key_points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->key_points(static_cast<int>(i)), output);
  }

  // map<string, .google.protobuf.Any> ext_info = 15;
  if (!this->ext_info().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::Any >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "aq.aidi.Region.ExtInfoEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->ext_info().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->ext_info().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::Any >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::Any >::const_iterator
          it = this->ext_info().begin();
          it != this->ext_info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<Region_ExtInfoEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ext_info_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            15, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Region_ExtInfoEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::Any >::const_iterator
          it = this->ext_info().begin();
          it != this->ext_info().end(); ++it) {
        entry.reset(ext_info_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            15, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:aq.aidi.Region)
}

::google::protobuf::uint8* Region::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:aq.aidi.Region)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aq.aidi.Polygon polygon = 1;
  if (this->has_polygon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->polygon_, deterministic, target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aq.aidi.Region.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // float score = 3;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->score(), target);
  }

  // repeated .aq.aidi.KeyPoint key_points = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->key_points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->key_points(static_cast<int>(i)), deterministic, target);
  }

  // map<string, .google.protobuf.Any> ext_info = 15;
  if (!this->ext_info().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::Any >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "aq.aidi.Region.ExtInfoEntry.key");
      }
    };

    if (deterministic &&
        this->ext_info().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->ext_info().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::Any >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::Any >::const_iterator
          it = this->ext_info().begin();
          it != this->ext_info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<Region_ExtInfoEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ext_info_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       15, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Region_ExtInfoEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::Any >::const_iterator
          it = this->ext_info().begin();
          it != this->ext_info().end(); ++it) {
        entry.reset(ext_info_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       15, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aq.aidi.Region)
  return target;
}

size_t Region::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aq.aidi.Region)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .aq.aidi.KeyPoint key_points = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->key_points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->key_points(static_cast<int>(i)));
    }
  }

  // map<string, .google.protobuf.Any> ext_info = 15;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ext_info_size());
  {
    ::google::protobuf::scoped_ptr<Region_ExtInfoEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::Any >::const_iterator
        it = this->ext_info().begin();
        it != this->ext_info().end(); ++it) {
      entry.reset(ext_info_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .aq.aidi.Polygon polygon = 1;
  if (this->has_polygon()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->polygon_);
  }

  // float score = 3;
  if (this->score() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Region::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aq.aidi.Region)
  GOOGLE_DCHECK_NE(&from, this);
  const Region* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Region>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aq.aidi.Region)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aq.aidi.Region)
    MergeFrom(*source);
  }
}

void Region::MergeFrom(const Region& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aq.aidi.Region)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  key_points_.MergeFrom(from.key_points_);
  ext_info_.MergeFrom(from.ext_info_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_polygon()) {
    mutable_polygon()->::aq::aidi::Polygon::MergeFrom(from.polygon());
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
}

void Region::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aq.aidi.Region)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Region::CopyFrom(const Region& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aq.aidi.Region)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Region::IsInitialized() const {
  return true;
}

void Region::Swap(Region* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Region::InternalSwap(Region* other) {
  using std::swap;
  key_points_.InternalSwap(&other->key_points_);
  ext_info_.Swap(&other->ext_info_);
  name_.Swap(&other->name_);
  swap(polygon_, other->polygon_);
  swap(score_, other->score_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Region::GetMetadata() const {
  protobuf_label_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_label_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

Label_ExtInfoEntry_DoNotUse::Label_ExtInfoEntry_DoNotUse() {}
Label_ExtInfoEntry_DoNotUse::Label_ExtInfoEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void Label_ExtInfoEntry_DoNotUse::MergeFrom(const Label_ExtInfoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Label_ExtInfoEntry_DoNotUse::GetMetadata() const {
  ::protobuf_label_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_label_2eproto::file_level_metadata[8];
}
void Label_ExtInfoEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void Label::InitAsDefaultInstance() {
  ::aq::aidi::_Label_default_instance_._instance.get_mutable()->img_size_ = const_cast< ::aq::aidi::Size2f*>(
      ::aq::aidi::Size2f::internal_default_instance());
  ::aq::aidi::_Label_default_instance_._instance.get_mutable()->origin_result_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}
void Label::clear_origin_result() {
  if (GetArenaNoVirtual() == NULL && origin_result_ != NULL) {
    delete origin_result_;
  }
  origin_result_ = NULL;
}
void Label::clear_ext_info() {
  ext_info_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Label::kDatasetTypeFieldNumber;
const int Label::kImgSizeFieldNumber;
const int Label::kNameFieldNumber;
const int Label::kScoreFieldNumber;
const int Label::kRegionsFieldNumber;
const int Label::kMasksFieldNumber;
const int Label::kHardcasesFieldNumber;
const int Label::kOriginResultFieldNumber;
const int Label::kExtInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Label::Label()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_label_2eproto::InitDefaultsLabel();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aq.aidi.Label)
}
Label::Label(const Label& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      regions_(from.regions_),
      masks_(from.masks_),
      hardcases_(from.hardcases_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ext_info_.MergeFrom(from.ext_info_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_img_size()) {
    img_size_ = new ::aq::aidi::Size2f(*from.img_size_);
  } else {
    img_size_ = NULL;
  }
  if (from.has_origin_result()) {
    origin_result_ = new ::google::protobuf::Any(*from.origin_result_);
  } else {
    origin_result_ = NULL;
  }
  ::memcpy(&dataset_type_, &from.dataset_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&dataset_type_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:aq.aidi.Label)
}

void Label::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&img_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&img_size_)) + sizeof(score_));
  _cached_size_ = 0;
}

Label::~Label() {
  // @@protoc_insertion_point(destructor:aq.aidi.Label)
  SharedDtor();
}

void Label::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete img_size_;
  if (this != internal_default_instance()) delete origin_result_;
}

void Label::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Label::descriptor() {
  ::protobuf_label_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_label_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Label& Label::default_instance() {
  ::protobuf_label_2eproto::InitDefaultsLabel();
  return *internal_default_instance();
}

Label* Label::New(::google::protobuf::Arena* arena) const {
  Label* n = new Label;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Label::Clear() {
// @@protoc_insertion_point(message_clear_start:aq.aidi.Label)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  regions_.Clear();
  masks_.Clear();
  hardcases_.Clear();
  ext_info_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && img_size_ != NULL) {
    delete img_size_;
  }
  img_size_ = NULL;
  if (GetArenaNoVirtual() == NULL && origin_result_ != NULL) {
    delete origin_result_;
  }
  origin_result_ = NULL;
  ::memset(&dataset_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&dataset_type_)) + sizeof(score_));
  _internal_metadata_.Clear();
}

bool Label::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aq.aidi.Label)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aq.aidi.Label.DataSetType dataset_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dataset_type(static_cast< ::aq::aidi::Label_DataSetType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aq.aidi.Size2f img_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_img_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aq.aidi.Label.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float score = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aq.aidi.Region regions = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_regions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aq.aidi.Polygon masks = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_masks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aq.aidi.Polygon hardcases = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_hardcases()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any origin_result = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_origin_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .google.protobuf.Any> ext_info = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          Label_ExtInfoEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Label_ExtInfoEntry_DoNotUse,
              ::std::string, ::google::protobuf::Any,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::Any > > parser(&ext_info_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aq.aidi.Label.ExtInfoEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aq.aidi.Label)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aq.aidi.Label)
  return false;
#undef DO_
}

void Label::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aq.aidi.Label)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aq.aidi.Label.DataSetType dataset_type = 1;
  if (this->dataset_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->dataset_type(), output);
  }

  // .aq.aidi.Size2f img_size = 2;
  if (this->has_img_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->img_size_, output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aq.aidi.Label.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // float score = 4;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->score(), output);
  }

  // repeated .aq.aidi.Region regions = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->regions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->regions(static_cast<int>(i)), output);
  }

  // repeated .aq.aidi.Polygon masks = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->masks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->masks(static_cast<int>(i)), output);
  }

  // repeated .aq.aidi.Polygon hardcases = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hardcases_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->hardcases(static_cast<int>(i)), output);
  }

  // .google.protobuf.Any origin_result = 8;
  if (this->has_origin_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->origin_result_, output);
  }

  // map<string, .google.protobuf.Any> ext_info = 15;
  if (!this->ext_info().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::Any >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "aq.aidi.Label.ExtInfoEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->ext_info().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->ext_info().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::Any >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::Any >::const_iterator
          it = this->ext_info().begin();
          it != this->ext_info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<Label_ExtInfoEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ext_info_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            15, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Label_ExtInfoEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::Any >::const_iterator
          it = this->ext_info().begin();
          it != this->ext_info().end(); ++it) {
        entry.reset(ext_info_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            15, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:aq.aidi.Label)
}

::google::protobuf::uint8* Label::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:aq.aidi.Label)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aq.aidi.Label.DataSetType dataset_type = 1;
  if (this->dataset_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->dataset_type(), target);
  }

  // .aq.aidi.Size2f img_size = 2;
  if (this->has_img_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->img_size_, deterministic, target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aq.aidi.Label.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // float score = 4;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->score(), target);
  }

  // repeated .aq.aidi.Region regions = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->regions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->regions(static_cast<int>(i)), deterministic, target);
  }

  // repeated .aq.aidi.Polygon masks = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->masks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->masks(static_cast<int>(i)), deterministic, target);
  }

  // repeated .aq.aidi.Polygon hardcases = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hardcases_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->hardcases(static_cast<int>(i)), deterministic, target);
  }

  // .google.protobuf.Any origin_result = 8;
  if (this->has_origin_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *this->origin_result_, deterministic, target);
  }

  // map<string, .google.protobuf.Any> ext_info = 15;
  if (!this->ext_info().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::Any >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "aq.aidi.Label.ExtInfoEntry.key");
      }
    };

    if (deterministic &&
        this->ext_info().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->ext_info().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::Any >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::Any >::const_iterator
          it = this->ext_info().begin();
          it != this->ext_info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<Label_ExtInfoEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ext_info_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       15, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Label_ExtInfoEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::Any >::const_iterator
          it = this->ext_info().begin();
          it != this->ext_info().end(); ++it) {
        entry.reset(ext_info_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       15, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aq.aidi.Label)
  return target;
}

size_t Label::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aq.aidi.Label)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .aq.aidi.Region regions = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->regions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->regions(static_cast<int>(i)));
    }
  }

  // repeated .aq.aidi.Polygon masks = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->masks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->masks(static_cast<int>(i)));
    }
  }

  // repeated .aq.aidi.Polygon hardcases = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->hardcases_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->hardcases(static_cast<int>(i)));
    }
  }

  // map<string, .google.protobuf.Any> ext_info = 15;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ext_info_size());
  {
    ::google::protobuf::scoped_ptr<Label_ExtInfoEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::Any >::const_iterator
        it = this->ext_info().begin();
        it != this->ext_info().end(); ++it) {
      entry.reset(ext_info_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .aq.aidi.Size2f img_size = 2;
  if (this->has_img_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->img_size_);
  }

  // .google.protobuf.Any origin_result = 8;
  if (this->has_origin_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->origin_result_);
  }

  // .aq.aidi.Label.DataSetType dataset_type = 1;
  if (this->dataset_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dataset_type());
  }

  // float score = 4;
  if (this->score() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Label::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aq.aidi.Label)
  GOOGLE_DCHECK_NE(&from, this);
  const Label* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Label>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aq.aidi.Label)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aq.aidi.Label)
    MergeFrom(*source);
  }
}

void Label::MergeFrom(const Label& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aq.aidi.Label)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  regions_.MergeFrom(from.regions_);
  masks_.MergeFrom(from.masks_);
  hardcases_.MergeFrom(from.hardcases_);
  ext_info_.MergeFrom(from.ext_info_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_img_size()) {
    mutable_img_size()->::aq::aidi::Size2f::MergeFrom(from.img_size());
  }
  if (from.has_origin_result()) {
    mutable_origin_result()->::google::protobuf::Any::MergeFrom(from.origin_result());
  }
  if (from.dataset_type() != 0) {
    set_dataset_type(from.dataset_type());
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
}

void Label::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aq.aidi.Label)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Label::CopyFrom(const Label& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aq.aidi.Label)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Label::IsInitialized() const {
  return true;
}

void Label::Swap(Label* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Label::InternalSwap(Label* other) {
  using std::swap;
  regions_.InternalSwap(&other->regions_);
  masks_.InternalSwap(&other->masks_);
  hardcases_.InternalSwap(&other->hardcases_);
  ext_info_.Swap(&other->ext_info_);
  name_.Swap(&other->name_);
  swap(img_size_, other->img_size_);
  swap(origin_result_, other->origin_result_);
  swap(dataset_type_, other->dataset_type_);
  swap(score_, other->score_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Label::GetMetadata() const {
  protobuf_label_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_label_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace aidi
}  // namespace aq

// @@protoc_insertion_point(global_scope)
