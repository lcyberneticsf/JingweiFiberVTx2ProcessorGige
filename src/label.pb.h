// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: label.proto

#ifndef PROTOBUF_label_2eproto__INCLUDED
#define PROTOBUF_label_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

//#if GOOGLE_PROTOBUF_VERSION < 3005000
//#error This file was generated by a newer version of protoc which is
//#error incompatible with your Protocol Buffer headers.  Please update
//#error your headers.
//#endif
//#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
//#error This file was generated by an older version of protoc which is
//#error incompatible with your Protocol Buffer headers.  Please
//#error regenerate this file with a newer version of protoc.
//#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_label_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[10];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsPoint2fImpl();
void InitDefaultsPoint2f();
void InitDefaultsSize2fImpl();
void InitDefaultsSize2f();
void InitDefaultsKeyPoint_ExtInfoEntry_DoNotUseImpl();
void InitDefaultsKeyPoint_ExtInfoEntry_DoNotUse();
void InitDefaultsKeyPointImpl();
void InitDefaultsKeyPoint();
void InitDefaultsRingImpl();
void InitDefaultsRing();
void InitDefaultsPolygonImpl();
void InitDefaultsPolygon();
void InitDefaultsRegion_ExtInfoEntry_DoNotUseImpl();
void InitDefaultsRegion_ExtInfoEntry_DoNotUse();
void InitDefaultsRegionImpl();
void InitDefaultsRegion();
void InitDefaultsLabel_ExtInfoEntry_DoNotUseImpl();
void InitDefaultsLabel_ExtInfoEntry_DoNotUse();
void InitDefaultsLabelImpl();
void InitDefaultsLabel();
inline void InitDefaults() {
  InitDefaultsPoint2f();
  InitDefaultsSize2f();
  InitDefaultsKeyPoint_ExtInfoEntry_DoNotUse();
  InitDefaultsKeyPoint();
  InitDefaultsRing();
  InitDefaultsPolygon();
  InitDefaultsRegion_ExtInfoEntry_DoNotUse();
  InitDefaultsRegion();
  InitDefaultsLabel_ExtInfoEntry_DoNotUse();
  InitDefaultsLabel();
}
}  // namespace protobuf_label_2eproto
namespace aq {
namespace aidi {
class KeyPoint;
class KeyPointDefaultTypeInternal;
extern KeyPointDefaultTypeInternal _KeyPoint_default_instance_;
class KeyPoint_ExtInfoEntry_DoNotUse;
class KeyPoint_ExtInfoEntry_DoNotUseDefaultTypeInternal;
extern KeyPoint_ExtInfoEntry_DoNotUseDefaultTypeInternal _KeyPoint_ExtInfoEntry_DoNotUse_default_instance_;
class Label;
class LabelDefaultTypeInternal;
extern LabelDefaultTypeInternal _Label_default_instance_;
class Label_ExtInfoEntry_DoNotUse;
class Label_ExtInfoEntry_DoNotUseDefaultTypeInternal;
extern Label_ExtInfoEntry_DoNotUseDefaultTypeInternal _Label_ExtInfoEntry_DoNotUse_default_instance_;
class Point2f;
class Point2fDefaultTypeInternal;
extern Point2fDefaultTypeInternal _Point2f_default_instance_;
class Polygon;
class PolygonDefaultTypeInternal;
extern PolygonDefaultTypeInternal _Polygon_default_instance_;
class Region;
class RegionDefaultTypeInternal;
extern RegionDefaultTypeInternal _Region_default_instance_;
class Region_ExtInfoEntry_DoNotUse;
class Region_ExtInfoEntry_DoNotUseDefaultTypeInternal;
extern Region_ExtInfoEntry_DoNotUseDefaultTypeInternal _Region_ExtInfoEntry_DoNotUse_default_instance_;
class Ring;
class RingDefaultTypeInternal;
extern RingDefaultTypeInternal _Ring_default_instance_;
class Size2f;
class Size2fDefaultTypeInternal;
extern Size2fDefaultTypeInternal _Size2f_default_instance_;
}  // namespace aidi
}  // namespace aq
namespace aq {
namespace aidi {

enum Label_DataSetType {
  Label_DataSetType_Unknown = 0,
  Label_DataSetType_Segment = 1,
  Label_DataSetType_Detection = 2,
  Label_DataSetType_Classify = 3,
  Label_DataSetType_Location = 4,
  Label_DataSetType_Label_DataSetType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Label_DataSetType_Label_DataSetType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Label_DataSetType_IsValid(int value);
const Label_DataSetType Label_DataSetType_DataSetType_MIN = Label_DataSetType_Unknown;
const Label_DataSetType Label_DataSetType_DataSetType_MAX = Label_DataSetType_Location;
const int Label_DataSetType_DataSetType_ARRAYSIZE = Label_DataSetType_DataSetType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Label_DataSetType_descriptor();
inline const ::std::string& Label_DataSetType_Name(Label_DataSetType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Label_DataSetType_descriptor(), value);
}
inline bool Label_DataSetType_Parse(
    const ::std::string& name, Label_DataSetType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Label_DataSetType>(
    Label_DataSetType_descriptor(), name, value);
}
// ===================================================================

class Point2f : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:aq.aidi.Point2f) */ {
 public:
  Point2f();
  virtual ~Point2f();

  Point2f(const Point2f& from);

  inline Point2f& operator=(const Point2f& from) {
    CopyFrom(from);
    return *this;
  }
 
  #if LANG_CXX11_
  Point2f(Point2f&& from) noexcept
    : Point2f() {
    *this = ::std::move(from);
  }

  inline Point2f& operator=(Point2f&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
 
  static const ::google::protobuf::Descriptor* descriptor();
  static const Point2f& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point2f* internal_default_instance() {
    return reinterpret_cast<const Point2f*>(
               &_Point2f_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Point2f* other);
  friend void swap(Point2f& a, Point2f& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Point2f* New() const PROTOBUF_FINAL { return New(NULL); }

  Point2f* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Point2f& from);
  void MergeFrom(const Point2f& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Point2f* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // @@protoc_insertion_point(class_scope:aq.aidi.Point2f)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  mutable int _cached_size_;
  friend struct ::protobuf_label_2eproto::TableStruct;
  friend void ::protobuf_label_2eproto::InitDefaultsPoint2fImpl();
};
// -------------------------------------------------------------------

class Size2f : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:aq.aidi.Size2f) */ {
 public:
  Size2f();
  virtual ~Size2f();

  Size2f(const Size2f& from);

  inline Size2f& operator=(const Size2f& from) {
    CopyFrom(from);
    return *this;
  }
  
  #if LANG_CXX11_
  Size2f(Size2f&& from) noexcept
    : Size2f() {
    *this = ::std::move(from);
  }

  inline Size2f& operator=(Size2f&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
 
  static const ::google::protobuf::Descriptor* descriptor();
  static const Size2f& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Size2f* internal_default_instance() {
    return reinterpret_cast<const Size2f*>(
               &_Size2f_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Size2f* other);
  friend void swap(Size2f& a, Size2f& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Size2f* New() const PROTOBUF_FINAL { return New(NULL); }

  Size2f* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Size2f& from);
  void MergeFrom(const Size2f& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Size2f* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float width = 1;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  float width() const;
  void set_width(float value);

  // float height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  float height() const;
  void set_height(float value);

  // @@protoc_insertion_point(class_scope:aq.aidi.Size2f)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float width_;
  float height_;
  mutable int _cached_size_;
  friend struct ::protobuf_label_2eproto::TableStruct;
  friend void ::protobuf_label_2eproto::InitDefaultsSize2fImpl();
};
// -------------------------------------------------------------------

class KeyPoint_ExtInfoEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<KeyPoint_ExtInfoEntry_DoNotUse, 
    ::std::string, ::google::protobuf::Any,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<KeyPoint_ExtInfoEntry_DoNotUse, 
    ::std::string, ::google::protobuf::Any,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  KeyPoint_ExtInfoEntry_DoNotUse();
  KeyPoint_ExtInfoEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const KeyPoint_ExtInfoEntry_DoNotUse& other);
  static const KeyPoint_ExtInfoEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const KeyPoint_ExtInfoEntry_DoNotUse*>(&_KeyPoint_ExtInfoEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class KeyPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:aq.aidi.KeyPoint) */ {
 public:
  KeyPoint();
  virtual ~KeyPoint();

  KeyPoint(const KeyPoint& from);

  inline KeyPoint& operator=(const KeyPoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KeyPoint(KeyPoint&& from) noexcept
    : KeyPoint() {
    *this = ::std::move(from);
  }

  inline KeyPoint& operator=(KeyPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyPoint* internal_default_instance() {
    return reinterpret_cast<const KeyPoint*>(
               &_KeyPoint_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(KeyPoint* other);
  friend void swap(KeyPoint& a, KeyPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KeyPoint* New() const PROTOBUF_FINAL { return New(NULL); }

  KeyPoint* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const KeyPoint& from);
  void MergeFrom(const KeyPoint& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(KeyPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .google.protobuf.Any> ext_info = 15;
  int ext_info_size() const;
  void clear_ext_info();
  static const int kExtInfoFieldNumber = 15;
  const ::google::protobuf::Map< ::std::string, ::google::protobuf::Any >&
      ext_info() const;
  ::google::protobuf::Map< ::std::string, ::google::protobuf::Any >*
      mutable_ext_info();

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .aq.aidi.Point2f location = 1;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 1;
  const ::aq::aidi::Point2f& location() const;
  ::aq::aidi::Point2f* release_location();
  ::aq::aidi::Point2f* mutable_location();
  void set_allocated_location(::aq::aidi::Point2f* location);

  // float score = 3;
  void clear_score();
  static const int kScoreFieldNumber = 3;
  float score() const;
  void set_score(float value);

  // float angle = 4;
  void clear_angle();
  static const int kAngleFieldNumber = 4;
  float angle() const;
  void set_angle(float value);

  // float radius = 5;
  void clear_radius();
  static const int kRadiusFieldNumber = 5;
  float radius() const;
  void set_radius(float value);

  // @@protoc_insertion_point(class_scope:aq.aidi.KeyPoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      KeyPoint_ExtInfoEntry_DoNotUse,
      ::std::string, ::google::protobuf::Any,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > ext_info_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::aq::aidi::Point2f* location_;
  float score_;
  float angle_;
  float radius_;
  mutable int _cached_size_;
  friend struct ::protobuf_label_2eproto::TableStruct;
  friend void ::protobuf_label_2eproto::InitDefaultsKeyPointImpl();
};
// -------------------------------------------------------------------

class Ring : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:aq.aidi.Ring) */ {
 public:
  Ring();
  virtual ~Ring();

  Ring(const Ring& from);

  inline Ring& operator=(const Ring& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11_
  Ring(Ring&& from) noexcept
    : Ring() {
    *this = ::std::move(from);
  }

  inline Ring& operator=(Ring&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ring& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ring* internal_default_instance() {
    return reinterpret_cast<const Ring*>(
               &_Ring_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Ring* other);
  friend void swap(Ring& a, Ring& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ring* New() const PROTOBUF_FINAL { return New(NULL); }

  Ring* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ring& from);
  void MergeFrom(const Ring& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ring* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .aq.aidi.Point2f points = 1;
  int points_size() const;
  void clear_points();
  static const int kPointsFieldNumber = 1;
  const ::aq::aidi::Point2f& points(int index) const;
  ::aq::aidi::Point2f* mutable_points(int index);
  ::aq::aidi::Point2f* add_points();
  ::google::protobuf::RepeatedPtrField< ::aq::aidi::Point2f >*
      mutable_points();
  const ::google::protobuf::RepeatedPtrField< ::aq::aidi::Point2f >&
      points() const;

  // @@protoc_insertion_point(class_scope:aq.aidi.Ring)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::aq::aidi::Point2f > points_;
  mutable int _cached_size_;
  friend struct ::protobuf_label_2eproto::TableStruct;
  friend void ::protobuf_label_2eproto::InitDefaultsRingImpl();
};
// -------------------------------------------------------------------

class Polygon : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:aq.aidi.Polygon) */ {
 public:
  Polygon();
  virtual ~Polygon();

  Polygon(const Polygon& from);

  inline Polygon& operator=(const Polygon& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11_
  Polygon(Polygon&& from) noexcept
    : Polygon() {
    *this = ::std::move(from);
  }

  inline Polygon& operator=(Polygon&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Polygon& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Polygon* internal_default_instance() {
    return reinterpret_cast<const Polygon*>(
               &_Polygon_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Polygon* other);
  friend void swap(Polygon& a, Polygon& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Polygon* New() const PROTOBUF_FINAL { return New(NULL); }

  Polygon* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Polygon& from);
  void MergeFrom(const Polygon& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Polygon* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .aq.aidi.Ring inners = 2;
  int inners_size() const;
  void clear_inners();
  static const int kInnersFieldNumber = 2;
  const ::aq::aidi::Ring& inners(int index) const;
  ::aq::aidi::Ring* mutable_inners(int index);
  ::aq::aidi::Ring* add_inners();
  ::google::protobuf::RepeatedPtrField< ::aq::aidi::Ring >*
      mutable_inners();
  const ::google::protobuf::RepeatedPtrField< ::aq::aidi::Ring >&
      inners() const;

  // .aq.aidi.Ring outer = 1;
  bool has_outer() const;
  void clear_outer();
  static const int kOuterFieldNumber = 1;
  const ::aq::aidi::Ring& outer() const;
  ::aq::aidi::Ring* release_outer();
  ::aq::aidi::Ring* mutable_outer();
  void set_allocated_outer(::aq::aidi::Ring* outer);

  // @@protoc_insertion_point(class_scope:aq.aidi.Polygon)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::aq::aidi::Ring > inners_;
  ::aq::aidi::Ring* outer_;
  mutable int _cached_size_;
  friend struct ::protobuf_label_2eproto::TableStruct;
  friend void ::protobuf_label_2eproto::InitDefaultsPolygonImpl();
};
// -------------------------------------------------------------------

class Region_ExtInfoEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Region_ExtInfoEntry_DoNotUse, 
    ::std::string, ::google::protobuf::Any,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Region_ExtInfoEntry_DoNotUse, 
    ::std::string, ::google::protobuf::Any,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Region_ExtInfoEntry_DoNotUse();
  Region_ExtInfoEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Region_ExtInfoEntry_DoNotUse& other);
  static const Region_ExtInfoEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Region_ExtInfoEntry_DoNotUse*>(&_Region_ExtInfoEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Region : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:aq.aidi.Region) */ {
 public:
  Region();
  virtual ~Region();

  Region(const Region& from);

  inline Region& operator=(const Region& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11_
  Region(Region&& from) noexcept
    : Region() {
    *this = ::std::move(from);
  }

  inline Region& operator=(Region&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Region& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Region* internal_default_instance() {
    return reinterpret_cast<const Region*>(
               &_Region_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Region* other);
  friend void swap(Region& a, Region& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Region* New() const PROTOBUF_FINAL { return New(NULL); }

  Region* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Region& from);
  void MergeFrom(const Region& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Region* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated .aq.aidi.KeyPoint key_points = 4;
  int key_points_size() const;
  void clear_key_points();
  static const int kKeyPointsFieldNumber = 4;
  const ::aq::aidi::KeyPoint& key_points(int index) const;
  ::aq::aidi::KeyPoint* mutable_key_points(int index);
  ::aq::aidi::KeyPoint* add_key_points();
  ::google::protobuf::RepeatedPtrField< ::aq::aidi::KeyPoint >*
      mutable_key_points();
  const ::google::protobuf::RepeatedPtrField< ::aq::aidi::KeyPoint >&
      key_points() const;

  // map<string, .google.protobuf.Any> ext_info = 15;
  int ext_info_size() const;
  void clear_ext_info();
  static const int kExtInfoFieldNumber = 15;
  const ::google::protobuf::Map< ::std::string, ::google::protobuf::Any >&
      ext_info() const;
  ::google::protobuf::Map< ::std::string, ::google::protobuf::Any >*
      mutable_ext_info();

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .aq.aidi.Polygon polygon = 1;
  bool has_polygon() const;
  void clear_polygon();
  static const int kPolygonFieldNumber = 1;
  const ::aq::aidi::Polygon& polygon() const;
  ::aq::aidi::Polygon* release_polygon();
  ::aq::aidi::Polygon* mutable_polygon();
  void set_allocated_polygon(::aq::aidi::Polygon* polygon);

  // float score = 3;
  void clear_score();
  static const int kScoreFieldNumber = 3;
  float score() const;
  void set_score(float value);

  // @@protoc_insertion_point(class_scope:aq.aidi.Region)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::aq::aidi::KeyPoint > key_points_;
  ::google::protobuf::internal::MapField<
      Region_ExtInfoEntry_DoNotUse,
      ::std::string, ::google::protobuf::Any,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > ext_info_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::aq::aidi::Polygon* polygon_;
  float score_;
  mutable int _cached_size_;
  friend struct ::protobuf_label_2eproto::TableStruct;
  friend void ::protobuf_label_2eproto::InitDefaultsRegionImpl();
};
// -------------------------------------------------------------------

class Label_ExtInfoEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Label_ExtInfoEntry_DoNotUse, 
    ::std::string, ::google::protobuf::Any,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Label_ExtInfoEntry_DoNotUse, 
    ::std::string, ::google::protobuf::Any,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Label_ExtInfoEntry_DoNotUse();
  Label_ExtInfoEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Label_ExtInfoEntry_DoNotUse& other);
  static const Label_ExtInfoEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Label_ExtInfoEntry_DoNotUse*>(&_Label_ExtInfoEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Label : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:aq.aidi.Label) */ {
 public:
  Label();
  virtual ~Label();

  Label(const Label& from);

  inline Label& operator=(const Label& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11_
  Label(Label&& from) noexcept
    : Label() {
    *this = ::std::move(from);
  }

  inline Label& operator=(Label&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Label& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Label* internal_default_instance() {
    return reinterpret_cast<const Label*>(
               &_Label_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(Label* other);
  friend void swap(Label& a, Label& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Label* New() const PROTOBUF_FINAL { return New(NULL); }

  Label* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Label& from);
  void MergeFrom(const Label& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Label* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  typedef Label_DataSetType DataSetType;
  static const DataSetType Unknown =
    Label_DataSetType_Unknown;
  static const DataSetType Segment =
    Label_DataSetType_Segment;
  static const DataSetType Detection =
    Label_DataSetType_Detection;
  static const DataSetType Classify =
    Label_DataSetType_Classify;
  static const DataSetType Location =
    Label_DataSetType_Location;
  static inline bool DataSetType_IsValid(int value) {
    return Label_DataSetType_IsValid(value);
  }
  static const DataSetType DataSetType_MIN =
    Label_DataSetType_DataSetType_MIN;
  static const DataSetType DataSetType_MAX =
    Label_DataSetType_DataSetType_MAX;
  static const int DataSetType_ARRAYSIZE =
    Label_DataSetType_DataSetType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DataSetType_descriptor() {
    return Label_DataSetType_descriptor();
  }
  static inline const ::std::string& DataSetType_Name(DataSetType value) {
    return Label_DataSetType_Name(value);
  }
  static inline bool DataSetType_Parse(const ::std::string& name,
      DataSetType* value) {
    return Label_DataSetType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .aq.aidi.Region regions = 5;
  int regions_size() const;
  void clear_regions();
  static const int kRegionsFieldNumber = 5;
  const ::aq::aidi::Region& regions(int index) const;
  ::aq::aidi::Region* mutable_regions(int index);
  ::aq::aidi::Region* add_regions();
  ::google::protobuf::RepeatedPtrField< ::aq::aidi::Region >*
      mutable_regions();
  const ::google::protobuf::RepeatedPtrField< ::aq::aidi::Region >&
      regions() const;

  // repeated .aq.aidi.Polygon masks = 6;
  int masks_size() const;
  void clear_masks();
  static const int kMasksFieldNumber = 6;
  const ::aq::aidi::Polygon& masks(int index) const;
  ::aq::aidi::Polygon* mutable_masks(int index);
  ::aq::aidi::Polygon* add_masks();
  ::google::protobuf::RepeatedPtrField< ::aq::aidi::Polygon >*
      mutable_masks();
  const ::google::protobuf::RepeatedPtrField< ::aq::aidi::Polygon >&
      masks() const;

  // repeated .aq.aidi.Polygon hardcases = 7;
  int hardcases_size() const;
  void clear_hardcases();
  static const int kHardcasesFieldNumber = 7;
  const ::aq::aidi::Polygon& hardcases(int index) const;
  ::aq::aidi::Polygon* mutable_hardcases(int index);
  ::aq::aidi::Polygon* add_hardcases();
  ::google::protobuf::RepeatedPtrField< ::aq::aidi::Polygon >*
      mutable_hardcases();
  const ::google::protobuf::RepeatedPtrField< ::aq::aidi::Polygon >&
      hardcases() const;

  // map<string, .google.protobuf.Any> ext_info = 15;
  int ext_info_size() const;
  void clear_ext_info();
  static const int kExtInfoFieldNumber = 15;
  const ::google::protobuf::Map< ::std::string, ::google::protobuf::Any >&
      ext_info() const;
  ::google::protobuf::Map< ::std::string, ::google::protobuf::Any >*
      mutable_ext_info();

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .aq.aidi.Size2f img_size = 2;
  bool has_img_size() const;
  void clear_img_size();
  static const int kImgSizeFieldNumber = 2;
  const ::aq::aidi::Size2f& img_size() const;
  ::aq::aidi::Size2f* release_img_size();
  ::aq::aidi::Size2f* mutable_img_size();
  void set_allocated_img_size(::aq::aidi::Size2f* img_size);

  // .google.protobuf.Any origin_result = 8;
  bool has_origin_result() const;
  void clear_origin_result();
  static const int kOriginResultFieldNumber = 8;
  const ::google::protobuf::Any& origin_result() const;
  ::google::protobuf::Any* release_origin_result();
  ::google::protobuf::Any* mutable_origin_result();
  void set_allocated_origin_result(::google::protobuf::Any* origin_result);

  // .aq.aidi.Label.DataSetType dataset_type = 1;
  void clear_dataset_type();
  static const int kDatasetTypeFieldNumber = 1;
  ::aq::aidi::Label_DataSetType dataset_type() const;
  void set_dataset_type(::aq::aidi::Label_DataSetType value);

  // float score = 4;
  void clear_score();
  static const int kScoreFieldNumber = 4;
  float score() const;
  void set_score(float value);

  // @@protoc_insertion_point(class_scope:aq.aidi.Label)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::aq::aidi::Region > regions_;
  ::google::protobuf::RepeatedPtrField< ::aq::aidi::Polygon > masks_;
  ::google::protobuf::RepeatedPtrField< ::aq::aidi::Polygon > hardcases_;
  ::google::protobuf::internal::MapField<
      Label_ExtInfoEntry_DoNotUse,
      ::std::string, ::google::protobuf::Any,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > ext_info_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::aq::aidi::Size2f* img_size_;
  ::google::protobuf::Any* origin_result_;
  int dataset_type_;
  float score_;
  mutable int _cached_size_;
  friend struct ::protobuf_label_2eproto::TableStruct;
  friend void ::protobuf_label_2eproto::InitDefaultsLabelImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point2f

// float x = 1;
inline void Point2f::clear_x() {
  x_ = 0;
}
inline float Point2f::x() const {
  // @@protoc_insertion_point(field_get:aq.aidi.Point2f.x)
  return x_;
}
inline void Point2f::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:aq.aidi.Point2f.x)
}

// float y = 2;
inline void Point2f::clear_y() {
  y_ = 0;
}
inline float Point2f::y() const {
  // @@protoc_insertion_point(field_get:aq.aidi.Point2f.y)
  return y_;
}
inline void Point2f::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:aq.aidi.Point2f.y)
}

// -------------------------------------------------------------------

// Size2f

// float width = 1;
inline void Size2f::clear_width() {
  width_ = 0;
}
inline float Size2f::width() const {
  // @@protoc_insertion_point(field_get:aq.aidi.Size2f.width)
  return width_;
}
inline void Size2f::set_width(float value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:aq.aidi.Size2f.width)
}

// float height = 2;
inline void Size2f::clear_height() {
  height_ = 0;
}
inline float Size2f::height() const {
  // @@protoc_insertion_point(field_get:aq.aidi.Size2f.height)
  return height_;
}
inline void Size2f::set_height(float value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:aq.aidi.Size2f.height)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// KeyPoint

// .aq.aidi.Point2f location = 1;
inline bool KeyPoint::has_location() const {
  return this != internal_default_instance() && location_ != NULL;
}
inline void KeyPoint::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
}
inline const ::aq::aidi::Point2f& KeyPoint::location() const {
  const ::aq::aidi::Point2f* p = location_;
  // @@protoc_insertion_point(field_get:aq.aidi.KeyPoint.location)
  return p != NULL ? *p : *reinterpret_cast<const ::aq::aidi::Point2f*>(
      &::aq::aidi::_Point2f_default_instance_);
}
inline ::aq::aidi::Point2f* KeyPoint::release_location() {
  // @@protoc_insertion_point(field_release:aq.aidi.KeyPoint.location)
  
  ::aq::aidi::Point2f* temp = location_;
  location_ = NULL;
  return temp;
}
inline ::aq::aidi::Point2f* KeyPoint::mutable_location() {
  
  if (location_ == NULL) {
    location_ = new ::aq::aidi::Point2f;
  }
  // @@protoc_insertion_point(field_mutable:aq.aidi.KeyPoint.location)
  return location_;
}
inline void KeyPoint::set_allocated_location(::aq::aidi::Point2f* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete location_;
  }
  if (location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:aq.aidi.KeyPoint.location)
}

// string name = 2;
inline void KeyPoint::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KeyPoint::name() const {
  // @@protoc_insertion_point(field_get:aq.aidi.KeyPoint.name)
  return name_.GetNoArena();
}
inline void KeyPoint::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aq.aidi.KeyPoint.name)
}
#if LANG_CXX11_
inline void KeyPoint::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aq.aidi.KeyPoint.name)
}
#endif
inline void KeyPoint::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aq.aidi.KeyPoint.name)
}
inline void KeyPoint::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aq.aidi.KeyPoint.name)
}
inline ::std::string* KeyPoint::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:aq.aidi.KeyPoint.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyPoint::release_name() {
  // @@protoc_insertion_point(field_release:aq.aidi.KeyPoint.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyPoint::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:aq.aidi.KeyPoint.name)
}

// float score = 3;
inline void KeyPoint::clear_score() {
  score_ = 0;
}
inline float KeyPoint::score() const {
  // @@protoc_insertion_point(field_get:aq.aidi.KeyPoint.score)
  return score_;
}
inline void KeyPoint::set_score(float value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:aq.aidi.KeyPoint.score)
}

// float angle = 4;
inline void KeyPoint::clear_angle() {
  angle_ = 0;
}
inline float KeyPoint::angle() const {
  // @@protoc_insertion_point(field_get:aq.aidi.KeyPoint.angle)
  return angle_;
}
inline void KeyPoint::set_angle(float value) {
  
  angle_ = value;
  // @@protoc_insertion_point(field_set:aq.aidi.KeyPoint.angle)
}

// float radius = 5;
inline void KeyPoint::clear_radius() {
  radius_ = 0;
}
inline float KeyPoint::radius() const {
  // @@protoc_insertion_point(field_get:aq.aidi.KeyPoint.radius)
  return radius_;
}
inline void KeyPoint::set_radius(float value) {
  
  radius_ = value;
  // @@protoc_insertion_point(field_set:aq.aidi.KeyPoint.radius)
}

// map<string, .google.protobuf.Any> ext_info = 15;
inline int KeyPoint::ext_info_size() const {
  return ext_info_.size();
}
inline const ::google::protobuf::Map< ::std::string, ::google::protobuf::Any >&
KeyPoint::ext_info() const {
  // @@protoc_insertion_point(field_map:aq.aidi.KeyPoint.ext_info)
  return ext_info_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::protobuf::Any >*
KeyPoint::mutable_ext_info() {
  // @@protoc_insertion_point(field_mutable_map:aq.aidi.KeyPoint.ext_info)
  return ext_info_.MutableMap();
}

// -------------------------------------------------------------------

// Ring

// repeated .aq.aidi.Point2f points = 1;
inline int Ring::points_size() const {
  return points_.size();
}
inline void Ring::clear_points() {
  points_.Clear();
}
inline const ::aq::aidi::Point2f& Ring::points(int index) const {
  // @@protoc_insertion_point(field_get:aq.aidi.Ring.points)
  return points_.Get(index);
}
inline ::aq::aidi::Point2f* Ring::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:aq.aidi.Ring.points)
  return points_.Mutable(index);
}
inline ::aq::aidi::Point2f* Ring::add_points() {
  // @@protoc_insertion_point(field_add:aq.aidi.Ring.points)
  return points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::aq::aidi::Point2f >*
Ring::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:aq.aidi.Ring.points)
  return &points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::aq::aidi::Point2f >&
Ring::points() const {
  // @@protoc_insertion_point(field_list:aq.aidi.Ring.points)
  return points_;
}

// -------------------------------------------------------------------

// Polygon

// .aq.aidi.Ring outer = 1;
inline bool Polygon::has_outer() const {
  return this != internal_default_instance() && outer_ != NULL;
}
inline void Polygon::clear_outer() {
  if (GetArenaNoVirtual() == NULL && outer_ != NULL) {
    delete outer_;
  }
  outer_ = NULL;
}
inline const ::aq::aidi::Ring& Polygon::outer() const {
  const ::aq::aidi::Ring* p = outer_;
  // @@protoc_insertion_point(field_get:aq.aidi.Polygon.outer)
  return p != NULL ? *p : *reinterpret_cast<const ::aq::aidi::Ring*>(
      &::aq::aidi::_Ring_default_instance_);
}
inline ::aq::aidi::Ring* Polygon::release_outer() {
  // @@protoc_insertion_point(field_release:aq.aidi.Polygon.outer)
  
  ::aq::aidi::Ring* temp = outer_;
  outer_ = NULL;
  return temp;
}
inline ::aq::aidi::Ring* Polygon::mutable_outer() {
  
  if (outer_ == NULL) {
    outer_ = new ::aq::aidi::Ring;
  }
  // @@protoc_insertion_point(field_mutable:aq.aidi.Polygon.outer)
  return outer_;
}
inline void Polygon::set_allocated_outer(::aq::aidi::Ring* outer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete outer_;
  }
  if (outer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      outer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, outer, submessage_arena);
    }
    
  } else {
    
  }
  outer_ = outer;
  // @@protoc_insertion_point(field_set_allocated:aq.aidi.Polygon.outer)
}

// repeated .aq.aidi.Ring inners = 2;
inline int Polygon::inners_size() const {
  return inners_.size();
}
inline void Polygon::clear_inners() {
  inners_.Clear();
}
inline const ::aq::aidi::Ring& Polygon::inners(int index) const {
  // @@protoc_insertion_point(field_get:aq.aidi.Polygon.inners)
  return inners_.Get(index);
}
inline ::aq::aidi::Ring* Polygon::mutable_inners(int index) {
  // @@protoc_insertion_point(field_mutable:aq.aidi.Polygon.inners)
  return inners_.Mutable(index);
}
inline ::aq::aidi::Ring* Polygon::add_inners() {
  // @@protoc_insertion_point(field_add:aq.aidi.Polygon.inners)
  return inners_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::aq::aidi::Ring >*
Polygon::mutable_inners() {
  // @@protoc_insertion_point(field_mutable_list:aq.aidi.Polygon.inners)
  return &inners_;
}
inline const ::google::protobuf::RepeatedPtrField< ::aq::aidi::Ring >&
Polygon::inners() const {
  // @@protoc_insertion_point(field_list:aq.aidi.Polygon.inners)
  return inners_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Region

// .aq.aidi.Polygon polygon = 1;
inline bool Region::has_polygon() const {
  return this != internal_default_instance() && polygon_ != NULL;
}
inline void Region::clear_polygon() {
  if (GetArenaNoVirtual() == NULL && polygon_ != NULL) {
    delete polygon_;
  }
  polygon_ = NULL;
}
inline const ::aq::aidi::Polygon& Region::polygon() const {
  const ::aq::aidi::Polygon* p = polygon_;
  // @@protoc_insertion_point(field_get:aq.aidi.Region.polygon)
  return p != NULL ? *p : *reinterpret_cast<const ::aq::aidi::Polygon*>(
      &::aq::aidi::_Polygon_default_instance_);
}
inline ::aq::aidi::Polygon* Region::release_polygon() {
  // @@protoc_insertion_point(field_release:aq.aidi.Region.polygon)
  
  ::aq::aidi::Polygon* temp = polygon_;
  polygon_ = NULL;
  return temp;
}
inline ::aq::aidi::Polygon* Region::mutable_polygon() {
  
  if (polygon_ == NULL) {
    polygon_ = new ::aq::aidi::Polygon;
  }
  // @@protoc_insertion_point(field_mutable:aq.aidi.Region.polygon)
  return polygon_;
}
inline void Region::set_allocated_polygon(::aq::aidi::Polygon* polygon) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete polygon_;
  }
  if (polygon) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      polygon = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, polygon, submessage_arena);
    }
    
  } else {
    
  }
  polygon_ = polygon;
  // @@protoc_insertion_point(field_set_allocated:aq.aidi.Region.polygon)
}

// string name = 2;
inline void Region::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Region::name() const {
  // @@protoc_insertion_point(field_get:aq.aidi.Region.name)
  return name_.GetNoArena();
}
inline void Region::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aq.aidi.Region.name)
}
#if LANG_CXX11_
inline void Region::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aq.aidi.Region.name)
}
#endif
inline void Region::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aq.aidi.Region.name)
}
inline void Region::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aq.aidi.Region.name)
}
inline ::std::string* Region::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:aq.aidi.Region.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Region::release_name() {
  // @@protoc_insertion_point(field_release:aq.aidi.Region.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Region::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:aq.aidi.Region.name)
}

// float score = 3;
inline void Region::clear_score() {
  score_ = 0;
}
inline float Region::score() const {
  // @@protoc_insertion_point(field_get:aq.aidi.Region.score)
  return score_;
}
inline void Region::set_score(float value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:aq.aidi.Region.score)
}

// repeated .aq.aidi.KeyPoint key_points = 4;
inline int Region::key_points_size() const {
  return key_points_.size();
}
inline void Region::clear_key_points() {
  key_points_.Clear();
}
inline const ::aq::aidi::KeyPoint& Region::key_points(int index) const {
  // @@protoc_insertion_point(field_get:aq.aidi.Region.key_points)
  return key_points_.Get(index);
}
inline ::aq::aidi::KeyPoint* Region::mutable_key_points(int index) {
  // @@protoc_insertion_point(field_mutable:aq.aidi.Region.key_points)
  return key_points_.Mutable(index);
}
inline ::aq::aidi::KeyPoint* Region::add_key_points() {
  // @@protoc_insertion_point(field_add:aq.aidi.Region.key_points)
  return key_points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::aq::aidi::KeyPoint >*
Region::mutable_key_points() {
  // @@protoc_insertion_point(field_mutable_list:aq.aidi.Region.key_points)
  return &key_points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::aq::aidi::KeyPoint >&
Region::key_points() const {
  // @@protoc_insertion_point(field_list:aq.aidi.Region.key_points)
  return key_points_;
}

// map<string, .google.protobuf.Any> ext_info = 15;
inline int Region::ext_info_size() const {
  return ext_info_.size();
}
inline const ::google::protobuf::Map< ::std::string, ::google::protobuf::Any >&
Region::ext_info() const {
  // @@protoc_insertion_point(field_map:aq.aidi.Region.ext_info)
  return ext_info_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::protobuf::Any >*
Region::mutable_ext_info() {
  // @@protoc_insertion_point(field_mutable_map:aq.aidi.Region.ext_info)
  return ext_info_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Label

// .aq.aidi.Label.DataSetType dataset_type = 1;
inline void Label::clear_dataset_type() {
  dataset_type_ = 0;
}
inline ::aq::aidi::Label_DataSetType Label::dataset_type() const {
  // @@protoc_insertion_point(field_get:aq.aidi.Label.dataset_type)
  return static_cast< ::aq::aidi::Label_DataSetType >(dataset_type_);
}
inline void Label::set_dataset_type(::aq::aidi::Label_DataSetType value) {
  
  dataset_type_ = value;
  // @@protoc_insertion_point(field_set:aq.aidi.Label.dataset_type)
}

// .aq.aidi.Size2f img_size = 2;
inline bool Label::has_img_size() const {
  return this != internal_default_instance() && img_size_ != NULL;
}
inline void Label::clear_img_size() {
  if (GetArenaNoVirtual() == NULL && img_size_ != NULL) {
    delete img_size_;
  }
  img_size_ = NULL;
}
inline const ::aq::aidi::Size2f& Label::img_size() const {
  const ::aq::aidi::Size2f* p = img_size_;
  // @@protoc_insertion_point(field_get:aq.aidi.Label.img_size)
  return p != NULL ? *p : *reinterpret_cast<const ::aq::aidi::Size2f*>(
      &::aq::aidi::_Size2f_default_instance_);
}
inline ::aq::aidi::Size2f* Label::release_img_size() {
  // @@protoc_insertion_point(field_release:aq.aidi.Label.img_size)
  
  ::aq::aidi::Size2f* temp = img_size_;
  img_size_ = NULL;
  return temp;
}
inline ::aq::aidi::Size2f* Label::mutable_img_size() {
  
  if (img_size_ == NULL) {
    img_size_ = new ::aq::aidi::Size2f;
  }
  // @@protoc_insertion_point(field_mutable:aq.aidi.Label.img_size)
  return img_size_;
}
inline void Label::set_allocated_img_size(::aq::aidi::Size2f* img_size) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete img_size_;
  }
  if (img_size) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      img_size = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, img_size, submessage_arena);
    }
    
  } else {
    
  }
  img_size_ = img_size;
  // @@protoc_insertion_point(field_set_allocated:aq.aidi.Label.img_size)
}

// string name = 3;
inline void Label::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Label::name() const {
  // @@protoc_insertion_point(field_get:aq.aidi.Label.name)
  return name_.GetNoArena();
}
inline void Label::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aq.aidi.Label.name)
}
#if LANG_CXX11_
inline void Label::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aq.aidi.Label.name)
}
#endif
inline void Label::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aq.aidi.Label.name)
}
inline void Label::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aq.aidi.Label.name)
}
inline ::std::string* Label::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:aq.aidi.Label.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Label::release_name() {
  // @@protoc_insertion_point(field_release:aq.aidi.Label.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Label::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:aq.aidi.Label.name)
}

// float score = 4;
inline void Label::clear_score() {
  score_ = 0;
}
inline float Label::score() const {
  // @@protoc_insertion_point(field_get:aq.aidi.Label.score)
  return score_;
}
inline void Label::set_score(float value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:aq.aidi.Label.score)
}

// repeated .aq.aidi.Region regions = 5;
inline int Label::regions_size() const {
  return regions_.size();
}
inline void Label::clear_regions() {
  regions_.Clear();
}
inline const ::aq::aidi::Region& Label::regions(int index) const {
  // @@protoc_insertion_point(field_get:aq.aidi.Label.regions)
  return regions_.Get(index);
}
inline ::aq::aidi::Region* Label::mutable_regions(int index) {
  // @@protoc_insertion_point(field_mutable:aq.aidi.Label.regions)
  return regions_.Mutable(index);
}
inline ::aq::aidi::Region* Label::add_regions() {
  // @@protoc_insertion_point(field_add:aq.aidi.Label.regions)
  return regions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::aq::aidi::Region >*
Label::mutable_regions() {
  // @@protoc_insertion_point(field_mutable_list:aq.aidi.Label.regions)
  return &regions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::aq::aidi::Region >&
Label::regions() const {
  // @@protoc_insertion_point(field_list:aq.aidi.Label.regions)
  return regions_;
}

// repeated .aq.aidi.Polygon masks = 6;
inline int Label::masks_size() const {
  return masks_.size();
}
inline void Label::clear_masks() {
  masks_.Clear();
}
inline const ::aq::aidi::Polygon& Label::masks(int index) const {
  // @@protoc_insertion_point(field_get:aq.aidi.Label.masks)
  return masks_.Get(index);
}
inline ::aq::aidi::Polygon* Label::mutable_masks(int index) {
  // @@protoc_insertion_point(field_mutable:aq.aidi.Label.masks)
  return masks_.Mutable(index);
}
inline ::aq::aidi::Polygon* Label::add_masks() {
  // @@protoc_insertion_point(field_add:aq.aidi.Label.masks)
  return masks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::aq::aidi::Polygon >*
Label::mutable_masks() {
  // @@protoc_insertion_point(field_mutable_list:aq.aidi.Label.masks)
  return &masks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::aq::aidi::Polygon >&
Label::masks() const {
  // @@protoc_insertion_point(field_list:aq.aidi.Label.masks)
  return masks_;
}

// repeated .aq.aidi.Polygon hardcases = 7;
inline int Label::hardcases_size() const {
  return hardcases_.size();
}
inline void Label::clear_hardcases() {
  hardcases_.Clear();
}
inline const ::aq::aidi::Polygon& Label::hardcases(int index) const {
  // @@protoc_insertion_point(field_get:aq.aidi.Label.hardcases)
  return hardcases_.Get(index);
}
inline ::aq::aidi::Polygon* Label::mutable_hardcases(int index) {
  // @@protoc_insertion_point(field_mutable:aq.aidi.Label.hardcases)
  return hardcases_.Mutable(index);
}
inline ::aq::aidi::Polygon* Label::add_hardcases() {
  // @@protoc_insertion_point(field_add:aq.aidi.Label.hardcases)
  return hardcases_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::aq::aidi::Polygon >*
Label::mutable_hardcases() {
  // @@protoc_insertion_point(field_mutable_list:aq.aidi.Label.hardcases)
  return &hardcases_;
}
inline const ::google::protobuf::RepeatedPtrField< ::aq::aidi::Polygon >&
Label::hardcases() const {
  // @@protoc_insertion_point(field_list:aq.aidi.Label.hardcases)
  return hardcases_;
}

// .google.protobuf.Any origin_result = 8;
inline bool Label::has_origin_result() const {
  return this != internal_default_instance() && origin_result_ != NULL;
}
inline const ::google::protobuf::Any& Label::origin_result() const {
  const ::google::protobuf::Any* p = origin_result_;
  // @@protoc_insertion_point(field_get:aq.aidi.Label.origin_result)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* Label::release_origin_result() {
  // @@protoc_insertion_point(field_release:aq.aidi.Label.origin_result)
  
  ::google::protobuf::Any* temp = origin_result_;
  origin_result_ = NULL;
  return temp;
}
inline ::google::protobuf::Any* Label::mutable_origin_result() {
  
  if (origin_result_ == NULL) {
    origin_result_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:aq.aidi.Label.origin_result)
  return origin_result_;
}
inline void Label::set_allocated_origin_result(::google::protobuf::Any* origin_result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(origin_result_);
  }
  if (origin_result) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      origin_result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, origin_result, submessage_arena);
    }
    
  } else {
    
  }
  origin_result_ = origin_result;
  // @@protoc_insertion_point(field_set_allocated:aq.aidi.Label.origin_result)
}

// map<string, .google.protobuf.Any> ext_info = 15;
inline int Label::ext_info_size() const {
  return ext_info_.size();
}
inline const ::google::protobuf::Map< ::std::string, ::google::protobuf::Any >&
Label::ext_info() const {
  // @@protoc_insertion_point(field_map:aq.aidi.Label.ext_info)
  return ext_info_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::protobuf::Any >*
Label::mutable_ext_info() {
  // @@protoc_insertion_point(field_mutable_map:aq.aidi.Label.ext_info)
  return ext_info_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace aidi
}  // namespace aq

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::aq::aidi::Label_DataSetType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::aq::aidi::Label_DataSetType>() {
  return ::aq::aidi::Label_DataSetType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_label_2eproto__INCLUDED
